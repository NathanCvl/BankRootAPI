generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model admin {
  id           Int            @id(map: "admin_pk")
  user         user           @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "admin_user_fk")
  peut_gerer   peut_gerer[]
  peut_valider peut_valider[]
  traiter      traiter[]
}

model bank_account {
  id            Int             @id(map: "bank_account_pk") @default(autoincrement())
  currency      Int
  num_account   Int
  created_at    DateTime        @db.Timestamp(6)
  update_at     DateTime        @db.Timestamp(6)
  peut_posseder peut_posseder[]
  transaction   transaction[]
}

model client {
  id            Int             @id(map: "client_pk")
  user          user            @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "client_user_fk")
  peut_gerer    peut_gerer[]
  peut_posseder peut_posseder[]
  request       request[]
  transaction   transaction[]
}

model peut_gerer {
  id        Int
  id_client Int
  admin     admin  @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "peut_gerer_admin_fk")
  client    client @relation(fields: [id_client], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "peut_gerer_client0_fk")

  @@id([id, id_client], map: "peut_gerer_pk")
}

model peut_posseder {
  id           Int
  id_client    Int
  bank_account bank_account @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "peut_posseder_bank_account_fk")
  client       client       @relation(fields: [id_client], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "peut_posseder_client0_fk")

  @@id([id, id_client], map: "peut_posseder_pk")
}

model peut_valider {
  id          Int
  id_admin    Int
  admin       admin       @relation(fields: [id_admin], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "peut_valider_admin0_fk")
  transaction transaction @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "peut_valider_transaction_fk")

  @@id([id, id_admin], map: "peut_valider_pk")
}

model request {
  id           Int       @id(map: "request_pk") @default(autoincrement())
  content      String    @db.VarChar(255)
  request_type String    @db.VarChar(50)
  created_at   DateTime  @db.Timestamp(6)
  update_at    DateTime  @db.Timestamp(6)
  id_client    Int
  client       client    @relation(fields: [id_client], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "request_client_fk")
  traiter      traiter[]
}

model traiter {
  id         Int
  id_request Int
  admin      admin   @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "traiter_admin_fk")
  request    request @relation(fields: [id_request], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "traiter_request0_fk")

  @@id([id, id_request], map: "traiter_pk")
}

model transaction {
  id              Int            @id(map: "transaction_pk") @default(autoincrement())
  amount          Int
  state           Boolean
  type            String         @db.VarChar(50)
  created_at      DateTime       @db.Timestamp(6)
  update_at       DateTime       @db.Timestamp(6)
  id_client       Int
  id_bank_account Int
  peut_valider    peut_valider[]
  bank_account    bank_account   @relation(fields: [id_bank_account], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "transaction_bank_account0_fk")
  client          client         @relation(fields: [id_client], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "transaction_client_fk")
}

model user {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(50)
  lastname   String   @db.VarChar(50)
  mail       String   @db.VarChar(50)
  password   String   @db.VarChar(250)
  uuid       String   @db.VarChar(250)
  created_at DateTime @db.Timestamp(6)
  update_at  DateTime @db.Timestamp(6)
  admin      admin?
  client     client?
}
